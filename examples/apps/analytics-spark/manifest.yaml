apiVersion: "sparkoperator.k8s.io/v1beta2"
kind: SparkApplication
metadata:
  name: tpcds-benchmark-data-generation-1g
spec:
  type: Scala
  image: seedjeffwan/spark:v2.4.5-examples
  sparkVersion: 2.4.5
  mainClass: com.amazonaws.eks.tpcds.DataGeneration
  mainApplicationFile: local:///opt/spark/examples/jars/eks-spark-benchmark-assembly-1.0.jar
  mode: cluster
  arguments:
    # TPC-DS data location (Must match the bucket of Minio)
    - "s3a://spark-k8s-data/TPCDS-TEST-1G"
    # Path to kit in the docker image
    - "/opt/tpcds-kit/tools"
    # Data Format
    - "parquet"
    # Scale factor (in GB)
    - "1"
    # Generate data num partitions
    - "100"
    # Create the partitioned fact tables
    - "false"
    # Shuffle to get partitions coalesced into single files.
    - "false"
    # Logging set to WARN
    - "true"
  sparkConf:
    "spark.speculation": "false"
    "spark.network.timeout": "2400"
    # S3 Credential
    "spark.hadoop.fs.s3a.endpoint": "http://artifacts.analytics-spark.svc:9000"
    "spark.hadoop.fs.s3a.access.key": "oBzJ1gOZOu0NgpLmaeKJ"
    "spark.hadoop.fs.s3a.secret.key": "PhwV7JQib8Bh3jxSJPgLtdR7OrbBHF9vyExrl6rc"
    # S3 Configs
    "spark.hadoop.fs.s3a.path.style.access": "true"
    "spark.hadoop.fs.s3a.fast.upload": "true"
    "spark.hadoop.fs.s3a.connection.timeout": "1200000"
    "spark.hadoop.fs.s3a.connection.maximum": "8192"
    #"spark.hadoop.fs.s3a.readahead.range": "256K"
    #"spark.hadoop.fs.s3a.input.fadvise": "random"
    # S3A Committer
    #"spark.hadoop.mapreduce.outputcommitter.factory.scheme.s3a": "org.apache.hadoop.fs.s3a.commit.S3ACommitterFactory"
    # "spark.sql.sources.commitProtocolClass": "org.apache.spark.internal.io.cloud.PathOutputCommitProtocol"
    # "spark.sql.parquet.output.committer.class": "org.apache.hadoop.mapreduce.lib.output.BindingPathOutputCommitter"
    #"spark.hadoop.fs.s3a.committer.name": "directory"
    #"spark.hadoop.fs.s3a.committer.staging.conflict-mode": "append"
    #spark.hadoop.fs.s3a.block.size 512M
    #spark.hadoop.fs.s3a.buffer.dir ${hadoop.tmp.dir}/s3a
    #spark.hadoop.fs.s3a.committer.magic.enabled false
    #spark.hadoop.fs.s3a.committer.name directory
    #spark.hadoop.fs.s3a.committer.staging.abort.pending.uploads true
    #spark.hadoop.fs.s3a.committer.staging.conflict-mode append
    #spark.hadoop.fs.s3a.committer.staging.tmp.path /tmp/staging
    #spark.hadoop.fs.s3a.committer.staging.unique-filenames true
    #spark.hadoop.fs.s3a.committer.threads 2048 # number of threads writing to MinIO
    #spark.hadoop.fs.s3a.connection.establish.timeout 5000
    #spark.hadoop.fs.s3a.connection.ssl.enabled false

    #spark.hadoop.fs.s3a.fast.upload.active.blocks 2048 # number of parallel uploads
    #spark.hadoop.fs.s3a.fast.upload.buffer disk # use disk as the buffer for uploads
    #spark.hadoop.fs.s3a.max.total.tasks 2048 # maximum number of parallel tasks
    #spark.hadoop.fs.s3a.multipart.size 512M # size of each multipart chunk
    #spark.hadoop.fs.s3a.multipart.threshold 512M # size before using multipart uploads
    #spark.hadoop.fs.s3a.socket.recv.buffer 65536 # read socket buffer hint
    #spark.hadoop.fs.s3a.socket.send.buffer 65536 # write socket buffer hint
    #spark.hadoop.fs.s3a.threads.max 2048 # maximum number of threads for S3A
  driver:
    cores: 2
    coreLimit: "2048m"
    memory: "8000m"
    serviceAccount: spark
  executor:
    instances: 3
    cores: 1
    memory: "8000m"
    memoryOverhead: 2g
  restartPolicy:
    type: Never
